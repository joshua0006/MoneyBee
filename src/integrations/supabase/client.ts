// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zzzhmwwidepbnkwtppqj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp6emhtd3dpZGVwYm5rd3RwcHFqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIyOTA3OTYsImV4cCI6MjA2Nzg2Njc5Nn0.mTm6qU1aBZU6fZKIfC4z8os1nzwYhge3A9aLIzkqnxI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Attach Clerk JWT to all Supabase requests so RLS policies work with external auth
// Safely access window.Clerk without breaking SSR/build
declare global {
  interface Window {
    Clerk?: any;
  }
}

async function getClerkToken(): Promise<string | null> {
  try {
    const session = (window as any)?.Clerk?.session;
    if (!session?.getToken) return null;
    // Require a Clerk JWT template named "supabase"; if missing, return null so requests go as anon
    const templated = await session.getToken({ template: 'supabase' }).catch(() => null);
    return templated; // null when template not configured
  } catch {
    return null;
  }
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false
  },
  global: {
    fetch: async (input: RequestInfo, init?: RequestInit) => {
      const token = await getClerkToken();
      const headers = new Headers(init?.headers ?? {});
      if (token) headers.set('Authorization', `Bearer ${token}`);
      return fetch(input, { ...init, headers });
    }
  }
});